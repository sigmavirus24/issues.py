[{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/573","assignee":null,"updated_at":"2012-03-03T00:52:19Z","comments":1,"milestone":null,"state":"open","user":{"gravatar_id":"3e9dc491607f52141897a765eaab25e4","login":"kmike","avatar_url":"https://secure.gravatar.com/avatar/3e9dc491607f52141897a765eaab25e4?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/kmike","id":107893},"title":"Class-based task sets","url":"https://api.github.com/repos/fabric/fabric/issues/573","created_at":"2012-03-03T00:38:27Z","labels":[{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/2.x","name":"2.x"},{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/Invoke","name":"Invoke"},{"color":"40a056","url":"https://api.github.com/repos/fabric/fabric/labels/Feature","name":"Feature"}],"number":573,"id":3486528,"body":"Semi-real-word example:\r\n\r\n    # super_deploy/mysql.py\r\n    \r\n    @task\r\n    def execute_sql(sql):\r\n       # ...\r\n\r\n    @task\r\n    def create_db(db_name):\r\n        sql = # ...\r\n        execute_sql(sql)\r\n\r\n    @task\r\n    def create_user(user, password):\r\n        sql =  #...\r\n        execute_sql(sql)\r\n\r\n    @task\r\n    def setup_db(db_name, user, password):\r\n        create_db(db_name)\r\n        create_user(user, password)\r\n\r\nAnd then someone wants to change ``execute_sql`` behavior (e.g. to print sql queries). The first solution is monkey-patching:\r\n\r\n    from super_deploy import mysql\r\n\r\n    @task\r\n    def my_execute_sql(..):\r\n        # ...\r\n    mysql.execute_sql = my_execute_sql\r\n\r\nBut this is monkey-patching and monkey-patching is not ok.\r\n\r\nSane solution is inheritance. Let's see how current class-based tasks may help:\r\n\r\n    class SetupDbTask(Task):\r\n        name = 'setup_db'\r\n     \r\n        def execute_sql(self, sql):\r\n            # ...\r\n\r\n        def create_db(self, db_name):\r\n            sql = # ...\r\n            self.execute_sql(sql)\r\n\r\n        def create_user(self, user, password):\r\n            sql =  #...\r\n            self.execute_sql(sql)\r\n\r\n        def run(self, db_name, user, password):\r\n            self.create_db(db_name)\r\n            self.create_user(user, password)\r\n\r\nNice! We can now subclass SetupDbTask and override 'execute_sql' method. But: we've lost create_user, create_db and execute_sql tasks, and we really want to be able to call them separately.\r\n\r\nOk, next attempt:\r\n\r\n    class Mysql(Task):\r\n        name = 'mysql'\r\n     \r\n        def execute_sql(self, sql):\r\n            # ...\r\n\r\n        def create_db(self, db_name):\r\n            sql = # ...\r\n            self.execute_sql(sql)\r\n\r\n        def create_user(self, user, password):\r\n            sql =  #...\r\n            self.execute_sql(sql)\r\n\r\n        def setup_db(self, db_name, user, password):\r\n            self.create_db(db_name)\r\n            self.create_user(user, password)\r\n\r\n        def run(self, name, *args, **kwargs):\r\n             method = getattr(self, name)\r\n             return method(*args, **kwargs)\r\n\r\nGreat, we now can override execute_sql and we have all tasks:\r\n\r\n     $ fab mysql:create_db,db_name\r\n\r\nThe downsides are awkward calling syntax and the fact tasks won't show up in ``fab --list``.\r\n\r\nIt is possible to have class-based task sets without these downsides as external projects (see e.g. https://github.com/kmike/fabric-taskset and https://github.com/ramusus/fabriclassed ) but this is a useful pattern and core support would allow a less hackish implementation. So I propose to add some sort of class-based task sets to the core fabric. Class based task sets seems to be even more useful than class-based tasks: in my experience tasks themselves tend to be small and rewriting them as classes only adds lines of code, it is the task combination problem that should benefit from class-based approach.\r\n"},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/571","assignee":null,"updated_at":"2012-02-27T23:40:23Z","comments":3,"milestone":null,"state":"open","user":{"gravatar_id":"34e031251528689dd8f8039fef24a65f","login":"JensRantil","avatar_url":"https://secure.gravatar.com/avatar/34e031251528689dd8f8039fef24a65f?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/JensRantil","id":730342},"title":"Extremelly slow get(...) call","url":"https://api.github.com/repos/fabric/fabric/issues/571","created_at":"2012-02-27T19:08:42Z","labels":[{"color":"a04040","url":"https://api.github.com/repos/fabric/fabric/labels/Bug","name":"Bug"},{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Network","name":"Network"},{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/put%28%29%2Fget%28%29","name":"put()/get()"}],"number":571,"id":3406198,"body":"I am experiencing an extremelly slow `get(src, dst)` execution. Fabric seems to be copying with the speed of around 300 kB/s while a copy using `scp` reaches a speed of around 10 MB/s (without compression).\r\n\r\nCould anyone help me in debugging this issue further?\r\n\r\nFurther information:\r\n\r\n* load is relativelly low on both machines\r\n* the machines seem to be reading and writing to disc equally much.\r\n* network bandwidth does not seem to be the bottleneck.\r\n* I am using a public key for authentication.\r\n* Probably worked a month ago or so.\r\n* Running Fabric 1.4.0. I've experienced this problem also with an earlier version (1.2.2?) but am not exactly sure which version that was.\r\n\r\nI guess I can work around this issue by executing `local(\"scp <src> <dst>\");`. This probably how I will solve it until another fix presents itself."},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/569","assignee":null,"updated_at":"2012-02-29T01:34:28Z","comments":3,"milestone":null,"state":"open","user":{"gravatar_id":"8eed7019d148ac32e454f66f28132670","login":"MattAustin","avatar_url":"https://secure.gravatar.com/avatar/8eed7019d148ac32e454f66f28132670?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/MattAustin","id":426026},"title":"@task decorator causes Sphinx autodoc to lose fuction signature","url":"https://api.github.com/repos/fabric/fabric/issues/569","created_at":"2012-02-26T02:52:00Z","labels":[{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Core","name":"Core"},{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"},{"color":"a04040","url":"https://api.github.com/repos/fabric/fabric/labels/Bug","name":"Bug"}],"number":569,"id":3388865,"body":"When using the @task decorator in a fabfile, Sphinx autodoc does not generate the function signature. The docstring is passed correctly, but the args and kwargs are lost.\r\n\r\nSome unsuccessful workarounds were attempted at http://stackoverflow.com/questions/8845195/using-sphinx-autodoc-for-a-fabfile, but no solution was found.\r\n\r\nThis also looks like it could be similar to an issue reported in 2009 regarding the @needs_host decorator, which I found on the fab-user mailing list: http://lists.gnu.org/archive/html/fab-user/2009-09/msg00026.html"},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/568","assignee":null,"updated_at":"2012-02-29T01:41:55Z","comments":2,"milestone":{"closed_issues":0,"state":"open","creator":{"gravatar_id":"f1acc6318028fdba9874c77bc622a2fb","login":"bitprophet","avatar_url":"https://secure.gravatar.com/avatar/f1acc6318028fdba9874c77bc622a2fb?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/bitprophet","id":6088},"title":"1.3.6","url":"https://api.github.com/repos/fabric/fabric/milestones/23","due_on":null,"created_at":"2012-02-14T06:33:21Z","number":23,"open_issues":2,"description":null},"state":"open","user":{"gravatar_id":"19e29ea0dcb1abef4fdbaf02f50d7088","login":"jsdalton","avatar_url":"https://secure.gravatar.com/avatar/19e29ea0dcb1abef4fdbaf02f50d7088?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/jsdalton","id":235836},"title":"execute() on different host does not change back to original host when done","url":"https://api.github.com/repos/fabric/fabric/issues/568","created_at":"2012-02-24T14:18:33Z","labels":[{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"},{"color":"e10c02","url":"https://api.github.com/repos/fabric/fabric/labels/Wart","name":"Wart"},{"color":"a04040","url":"https://api.github.com/repos/fabric/fabric/labels/Bug","name":"Bug"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Core","name":"Core"}],"number":568,"id":3372958,"body":"Here's a quick demonstration of the issue:\r\n\r\nfabfile.py:\r\n\r\n```python\r\nfrom fabric.api import *\r\n\r\n@task\r\n@hosts('localhost')\r\ndef test():\r\n    run(\"echo hi\")\r\n    execute(test_other_host)\r\n    run(\"echo hi\")\r\n\r\n@task\r\n@hosts('otherhost')\r\ndef test_other_host():\r\n    run(\"echo howdy\")\r\n```\r\n\r\nThe output is:\r\n\r\n    $ fab test\r\n    [localhost] Executing task 'test'\r\n    [localhost] run: echo hi\r\n    [localhost] out: hi\r\n\r\n    [otherhost] Executing task 'test_other_host'\r\n    [otherhost] run: echo howdy\r\n    [otherhost] out: howdy\r\n\r\n    [otherhost] run: echo hi\r\n    [otherhost] out: hi\r\n\r\n\r\n    Done.\r\n    Disconnecting from otherhost... done.\r\n    Disconnecting from localhost... done.\r\n\r\nThe problem is that when test_other_host() is done executing, the remaining tasks in test() are executing under that host's context, not the original context it was decorated with. This appears to happen regardless of how the hosts are specified (e.g. via the command line, explicitly as an arg to execute(), etc).\r\n\r\nI'm running the latest version of Fabric:\r\n\r\n    $ fab --version\r\n    Fabric 1.4.0\r\n    ssh (library) 1.7.13\r\n\r\nSo I'm not sure whether it's always been like this or whether this is a regression."},{"pull_request":{"diff_url":"https://github.com/fabric/fabric/pull/567.diff","html_url":"https://github.com/fabric/fabric/pull/567","patch_url":"https://github.com/fabric/fabric/pull/567.patch"},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/567","assignee":null,"updated_at":"2012-03-02T18:16:56Z","comments":3,"milestone":null,"state":"open","user":{"gravatar_id":"fcefd328a91e0e33fa70a1146d73a532","login":"mviera","avatar_url":"https://secure.gravatar.com/avatar/fcefd328a91e0e33fa70a1146d73a532?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/mviera","id":15122},"title":"Bug when scaping quotes in sed","url":"https://api.github.com/repos/fabric/fabric/issues/567","created_at":"2012-02-24T11:16:29Z","labels":[],"number":567,"id":3371047,"body":"Hi,\r\n\r\nIt seems there is a bug in sed when trying to escape quotes. I tried to replace 'HOST': '' to 'HOST': 'ip-address' and sed throws the following error:\r\n\r\n[192.168.11.142] sudo: sudo -S -p 'sudo password:'  sed -i.bak -r -e 's/\\'HOST\\': \\'\\'/\\'HOST\\': \\'192.168.11.142\\'/g' /home/user/settings.py\r\n\r\nFatal error: sudo() received nonzero return code 1 while executing!\r\n\r\nRequested: sed -i.bak -r -e 's/\\'HOST\\': \\'\\'/\\'HOST\\': \\'192.168.11.142\\'/g' /home/user/settings.py\r\nExecuted: sudo -S -p 'sudo password:'  sed -i.bak -r -e 's/\\'HOST\\': \\'\\'/\\'HOST\\': \\'192.168.11.142\\'/g' /home/user/settings.py\r\n\r\nNone\r\n\r\n================== Standard output ======================================\r\n\r\nbash: -c: line 0: unexpected EOF while looking for matching `''\r\nbash: -c: line 1: syntax error: unexpected end of file\r\n\r\n=====================================================================\r\n\r\nIt seems the best way to escape quotes in bash is the following: '\\''\r\n\r\nI already have sed working fine so I'm looking forward to find this fix accepted.\r\n\r\nCheers,\r\nManuel Viera."},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/566","assignee":null,"updated_at":"2012-02-29T01:41:56Z","comments":2,"milestone":null,"state":"open","user":{"gravatar_id":"d7773594c583cf2c9db22f403d183c5a","login":"vxnick","avatar_url":"https://secure.gravatar.com/avatar/d7773594c583cf2c9db22f403d183c5a?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/vxnick","id":85934},"title":"Fabfile in /etc","url":"https://api.github.com/repos/fabric/fabric/issues/566","created_at":"2012-02-23T10:49:44Z","labels":[{"color":"40a056","url":"https://api.github.com/repos/fabric/fabric/labels/Feature","name":"Feature"},{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Core","name":"Core"},{"color":"02d7e1","url":"https://api.github.com/repos/fabric/fabric/labels/Quick","name":"Quick"}],"number":566,"id":3354209,"body":"Am I right in thinking Fabric used to look for `/etc/fabfile`? It doesn't seem to now, and I'd like to avoid setting it in a `fabricrc` for each user.\r\n\r\nThanks!"},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/565","assignee":null,"updated_at":"2012-02-29T01:41:56Z","comments":45,"milestone":null,"state":"open","user":{"gravatar_id":"f1acc6318028fdba9874c77bc622a2fb","login":"bitprophet","avatar_url":"https://secure.gravatar.com/avatar/f1acc6318028fdba9874c77bc622a2fb?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/bitprophet","id":6088},"title":"Split out non-ssh-dependent features into separate lib","url":"https://api.github.com/repos/fabric/fabric/issues/565","created_at":"2012-02-22T00:28:03Z","labels":[{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/2.x","name":"2.x"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Packaging","name":"Packaging"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Refactoring","name":"Refactoring"},{"color":"4070a0","url":"https://api.github.com/repos/fabric/fabric/labels/Support","name":"Support"},{"color":"e10c02","url":"https://api.github.com/repos/fabric/fabric/labels/Wart","name":"Wart"}],"number":565,"id":3324499,"body":"Things are coming to a head and it'd be good to split out Fabric's task execution stuff into its own \"third party\" tool/library so it can be used/referenced independently of our SSH functionality.\r\n\r\nRight now, anybody wanting to use Fab-as-runner must still install `ssh` and `PyCrypto`, which sucks.\r\n\r\nAnd if we're splitting it between task running and SSH, having \"Fabric\" be \"SSH + dependency on new runner tool\" makes much more sense (both re: backwards compatibility, and overall usefulness) than vice versa.\r\n\r\nSpeaking of backwards compat, I am marking this 2.0 because it makes *more* sense to do it at a 2.0 backwards incompat barrier (since at the very least it adds a new install dependency to Fabric), **but** doing the split in, say, 1.6 or 1.7 should also be quite possible if the timing is better.\r\n\r\n----\r\n\r\nTo be clear, this new tool would:\r\n\r\n* Maybe, possibly, but probably not just be us glomping onto an existing tool like Paver\r\n    * Paver tries to do too much and I've never been a big fan of how its API feels\r\n    * Really not aware of any other tools that are at all well known and fit the use case any better\r\n    * EDIT: [Baker](http://pypi.python.org/pypi/Baker/1.02) actually looks half decent, though it's obviously not a perfect match (nothing would be, anything would require some tweaks.)\r\n* Have a distinct identity from Fabric, while probably remaining \"affiliated\"\r\n    * Name brainstorm incoming.\r\n* Encompass the \"run Python callables as tasks from the CLI with args\" functionality that currently exists within Fabric\r\n* Likely entail some refactoring of how that machinery works, if only just to make post-ripout integration easier\r\n* Probably get some of the remaining big task-runner \"missing features\" implemented right off the bat (really just #452)"},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/564","assignee":null,"updated_at":"2012-02-29T01:41:57Z","comments":3,"milestone":null,"state":"open","user":{"gravatar_id":"f1acc6318028fdba9874c77bc622a2fb","login":"bitprophet","avatar_url":"https://secure.gravatar.com/avatar/f1acc6318028fdba9874c77bc622a2fb?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/bitprophet","id":6088},"title":"Document env.sudo_prefix","url":"https://api.github.com/repos/fabric/fabric/issues/564","created_at":"2012-02-18T04:38:15Z","labels":[{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"},{"color":"02d7e1","url":"https://api.github.com/repos/fabric/fabric/labels/Quick","name":"Quick"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Docs","name":"Docs"},{"color":"4070a0","url":"https://api.github.com/repos/fabric/fabric/labels/Support","name":"Support"}],"number":564,"id":3277464,"body":"`env.sudo_prefix` works to specify *which* sudo is being called, which is an uncommon but not entirely rare need for users whose default `$PATH` does not include it.\r\n\r\nHowever, it's not documented, and probably should be.\r\n\r\n(Was: \"Allow override of which sudo binary is used\".)"},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/563","assignee":null,"updated_at":"2012-02-29T01:41:58Z","comments":5,"milestone":null,"state":"open","user":{"gravatar_id":"f1acc6318028fdba9874c77bc622a2fb","login":"bitprophet","avatar_url":"https://secure.gravatar.com/avatar/f1acc6318028fdba9874c77bc622a2fb?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/bitprophet","id":6088},"title":"Host aliases","url":"https://api.github.com/repos/fabric/fabric/issues/563","created_at":"2012-02-17T21:29:14Z","labels":[{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Core","name":"Core"},{"color":"40a056","url":"https://api.github.com/repos/fabric/fabric/labels/Feature","name":"Feature"},{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/2.x","name":"2.x"}],"number":563,"id":3274297,"body":"Want: ability to refer to host names/aliases which expand to a different host string at connection/normalization time. (Specific use case: Vagrant multi-VM setups, where you need to associate a port number with a name.)\r\n\r\nPartial solution: The new SSH config support in 1.4, which allows \"long-term\" aliases to be specified in your ssh_config file.\r\n\r\nProblem: that only works for static/long term aliasing and does not function well for anything dynamically pulling the info from elsewhere (in my case, a Vagrant-oriented data [YAML] file, but think also about Python code / web services / etc)\r\n\r\nSolution: add `env.hostdefs` mapping that lets you specify e.g. `{'foo': 'user@foo.com:2203'}`, you use `@hosts('foo')`, Fabric connects to `user@foo.com:2203` under the hood.\r\n\r\n----\r\n\r\nPotential pitfalls:\r\n\r\n* What to display to the user in e.g. the host prefix?\r\n* How to mesh with `ssh_config` -- apply `hostdefs` before, or after? (Thinking before, easier to implement, fits \"Fabric level config overrides lower level config\" precedent.)\r\n\r\n----\r\n\r\nSee also: #4, #297"},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/562","assignee":null,"updated_at":"2012-02-29T01:41:58Z","comments":3,"milestone":null,"state":"open","user":{"gravatar_id":"333b958c8343d1fd93032d00fb7b9e1e","login":"jravetch","avatar_url":"https://secure.gravatar.com/avatar/333b958c8343d1fd93032d00fb7b9e1e?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/jravetch","id":316190},"title":"SSH agent forwarding error","url":"https://api.github.com/repos/fabric/fabric/issues/562","created_at":"2012-02-16T05:06:26Z","labels":[{"color":"a04040","url":"https://api.github.com/repos/fabric/fabric/labels/Bug","name":"Bug"},{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Network","name":"Network"}],"number":562,"id":3246496,"body":"I enabled ssh agent forwarding with fab 1.4 with env.forward_agent = 'True' and all seems fine, except I receive an odd error during code shipment:\r\n\r\nout: Authentication response too long: 3577407571\r\nout: fatal: The remote end hung up unexpectedly\r\n\r\nFab does properly forward the agent when pulling code from github, so not sure what's going on.\r\n\r\nBefore fab 1.4, I used this function to get around the key forwarding issue:\r\n\r\ndef sshagent_run(cmd):\r\n       local('ssh -A %s@%s \"%s\"' % (env.user, env.host, cmd))\r\n\r\nAny idea what's going on?\r\n\r\n"},{"pull_request":{"diff_url":"https://github.com/fabric/fabric/pull/558.diff","html_url":"https://github.com/fabric/fabric/pull/558","patch_url":"https://github.com/fabric/fabric/pull/558.patch"},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/558","assignee":null,"updated_at":"2012-02-13T18:47:51Z","comments":8,"milestone":null,"state":"open","user":{"gravatar_id":"7d3121c813ff3c3577324a096fe9a5c6","login":"tswicegood","avatar_url":"https://secure.gravatar.com/avatar/7d3121c813ff3c3577324a096fe9a5c6?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/tswicegood","id":4328},"title":"Switching output to logging module","url":"https://api.github.com/repos/fabric/fabric/issues/558","created_at":"2012-02-11T22:54:26Z","labels":[],"number":558,"id":3187894,"body":"This isn't ready, but it's a starting point for conversation.\r\n\r\nThings to do:\r\n\r\n* Adjust tests that verify mocked `sys.std*` values to instead check loggers for information\r\n* ~~Create a test runner that plays nicely with `nosetests` or at least make sure that `--nologcapture` is the default~~\r\n* More data needs to be provided to the logger so it can format appropriately.\r\n\r\nOne thing that would make the last point easier is creating a `RunningTask` object that handles all of the running and can be passed to the logger and let the formatter figure out what to do with it rather than trying to build a big dictionary of everything that's currently in vars inside `execute`/`_execute`."},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/557","assignee":null,"updated_at":"2012-02-29T01:42:00Z","comments":5,"milestone":null,"state":"open","user":{"gravatar_id":"52654cfef40a0579cb31843b01ba49bc","login":"mjtamlyn","avatar_url":"https://secure.gravatar.com/avatar/52654cfef40a0579cb31843b01ba49bc?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/mjtamlyn","id":389581},"title":"Specify namespace on command line","url":"https://api.github.com/repos/fabric/fabric/issues/557","created_at":"2012-02-10T09:12:02Z","labels":[{"color":"40a056","url":"https://api.github.com/repos/fabric/fabric/labels/Feature","name":"Feature"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Core","name":"Core"},{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"},{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/Invoke","name":"Invoke"}],"number":557,"id":3169502,"body":"I'm developing a fairly large set of fabric commands, and namespacing is briliant! However we quite often need to run several tasks at once, but all in the same namespace. It'd be nice to have a shortcut for these:\r\n\r\n    fab --namespace=my.lovely.namespace command1 command2 command3\r\n\r\nas an alias for\r\n\r\n    fab my.lovely.namespace.command1 my.lovely.namespace.command2 my.lovely.namespace.command3\r\n\r\nI would propose `-N` as the short command as it's not currently in use."},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/556","assignee":null,"updated_at":"2012-02-29T01:42:01Z","comments":0,"milestone":null,"state":"open","user":{"gravatar_id":"f1acc6318028fdba9874c77bc622a2fb","login":"bitprophet","avatar_url":"https://secure.gravatar.com/avatar/f1acc6318028fdba9874c77bc622a2fb?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/bitprophet","id":6088},"title":"Allow runtime selection of per-task parallelization","url":"https://api.github.com/repos/fabric/fabric/issues/556","created_at":"2012-02-10T01:41:18Z","labels":[{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Core","name":"Core"},{"color":"40a056","url":"https://api.github.com/repos/fabric/fabric/labels/Feature","name":"Feature"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Network","name":"Network"}],"number":556,"id":3166733,"body":"Right now, one can only set parallel behavior like so:\r\n\r\n* Globally, statically, via `env.parallel`\r\n* Per-task, statically, via `@parallel`\r\n* Globally, at runtime, via `-P`/`--parallel` (just sets env var)\r\n\r\nThe missing quadrant is \"per-task, at runtime, via ???\".\r\n\r\nOther runtime per-task tweaks for hosts/roles/host exclusions, are filtered out as \"magical kwargs\", e.g. `fab foo:host=bar` where `bar` is popped and used by `fabric/main.py` to prep a per-task host list. This is *probably* the way to go here as well, as much as I dislike adding more names to the \"invalid kwargs for your own tasks\" list.\r\n\r\nThis should definitely tie into an explicit `parallel=False` kwarg to `execute()` so that users can configure this \"statically\" but per-invocation.\r\n\r\n----\r\n\r\nN.B. A half decent workaround for some use cases (such as the one that caused me to write this issue) is to make sure you use `@runs_once` on the non-parallel task(s). Specifically,\r\n\r\n    $ fab -R rolename -P task_setting_env_vars task_doing_stuff_remotely\r\n\r\nwill misbehave because `task_setting_env_vars` not only gets run once per host (which may or may not be problematic) but because it's run in a subprocess its environmental tweaks never reach `task_doing_stuff_remotely`.\r\n\r\nUsing `@runs_once` on `task_setting_env_vars` appears to correctly disable parallelization for its own execution.\r\n\r\n----\r\n\r\nFor more general applications involving multiple doing-work-remotely tasks, where some need to be run in parallel in an ad-hoc manner and some do not, this problem still needs solving."},{"pull_request":{"diff_url":"https://github.com/fabric/fabric/pull/552.diff","html_url":"https://github.com/fabric/fabric/pull/552","patch_url":"https://github.com/fabric/fabric/pull/552.patch"},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/552","assignee":null,"updated_at":"2012-02-24T03:02:10Z","comments":1,"milestone":null,"state":"open","user":{"gravatar_id":"36c8d0dd59896a64cd4d713e0273c368","login":"twoolie","avatar_url":"https://secure.gravatar.com/avatar/36c8d0dd59896a64cd4d713e0273c368?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/twoolie","id":270117},"title":"make fabric capable of loading .fabricrc.[yml|yaml] files","url":"https://api.github.com/repos/fabric/fabric/issues/552","created_at":"2012-02-06T05:18:35Z","labels":[],"number":552,"id":3103994,"body":"Make fabric capable of loading yaml. This would allow setting up a .fabricrc.yml that contains e.g. roles.\r\n\r\nUse case:\r\n\r\n    twoolie:~$ fab -R office -- sudo apt-get upgrade\r\n\r\nAlso allows more complex settings behavior with nested dicts, very easy to implement!"},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/546","assignee":null,"updated_at":"2012-02-29T01:42:02Z","comments":1,"milestone":null,"state":"open","user":{"gravatar_id":"f1acc6318028fdba9874c77bc622a2fb","login":"bitprophet","avatar_url":"https://secure.gravatar.com/avatar/f1acc6318028fdba9874c77bc622a2fb?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/bitprophet","id":6088},"title":"Custom sphinx directive for env vars","url":"https://api.github.com/repos/fabric/fabric/issues/546","created_at":"2012-02-02T02:05:06Z","labels":[{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Docs","name":"Docs"},{"color":"4070a0","url":"https://api.github.com/repos/fabric/fabric/labels/Support","name":"Support"}],"number":546,"id":3062184,"body":"Getting very, very sick of coming up with a \"label\" for env vars every time they are referenced, e.g.:\r\n\r\n    :ref:`env.xxx <xxx>`\r\n\r\nWould be nice to solve this with a directive like:\r\n\r\n    :env:`xxx`\r\n\r\nthough offhand it may require the label being referenced fitting a very specific format (I typically do this anyways -- the label is usually the verbatim env var name, sometimes with an `s/_/-/`.)"},{"pull_request":{"diff_url":"https://github.com/fabric/fabric/pull/545.diff","html_url":"https://github.com/fabric/fabric/pull/545","patch_url":"https://github.com/fabric/fabric/pull/545.patch"},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/545","assignee":null,"updated_at":"2012-02-29T01:42:03Z","comments":2,"milestone":null,"state":"open","user":{"gravatar_id":"0d61bf69a12fc697ce718ae18ec0c45c","login":"ehebert","avatar_url":"https://secure.gravatar.com/avatar/0d61bf69a12fc697ce718ae18ec0c45c?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/ehebert","id":185744},"title":"Adds convenience chown-ing kwargs to put and upload_template.","url":"https://api.github.com/repos/fabric/fabric/issues/545","created_at":"2012-02-01T18:55:59Z","labels":[],"number":545,"id":3056738,"body":"So that upload_template can be a one and done command, if user and/or\r\ngroup kwargs are supplied to upload_template or put, the file is\r\nchowned with the specified user or group as part of the sftp upload.\r\n\r\nIf only or the other of user or group is supplied the existing uid\r\nor gid of the file is used when chown'ing the file.\r\n\r\nThis patch implements #257"},{"pull_request":{"diff_url":"https://github.com/fabric/fabric/pull/544.diff","html_url":"https://github.com/fabric/fabric/pull/544","patch_url":"https://github.com/fabric/fabric/pull/544.patch"},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/544","assignee":null,"updated_at":"2012-02-29T01:42:04Z","comments":0,"milestone":null,"state":"open","user":{"gravatar_id":"4b8559f4f777350fe12ed793ecf1ecd3","login":"vitek","avatar_url":"https://secure.gravatar.com/avatar/4b8559f4f777350fe12ed793ecf1ecd3?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/vitek","id":489439},"title":"SFtp.put(): Preserve access and modification times","url":"https://api.github.com/repos/fabric/fabric/issues/544","created_at":"2012-02-01T06:03:55Z","labels":[{"color":"40a056","url":"https://api.github.com/repos/fabric/fabric/labels/Feature","name":"Feature"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Operations","name":"Operations"},{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"}],"number":544,"id":3047846,"body":"Preserve file mtime and atime times useful when copying static to more than one frontend so browser can cache it depending on Last-Modified header.\r\n\r\nNow utime() is called unconditionally for all local files (local_is_path is set).\r\n\r\n "},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/541","assignee":null,"updated_at":"2012-01-30T22:22:33Z","comments":1,"milestone":null,"state":"open","user":{"gravatar_id":"ed2a7784b90c807612ac95016962b5da","login":"ZZelle","avatar_url":"https://secure.gravatar.com/avatar/ed2a7784b90c807612ac95016962b5da?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/ZZelle","id":1387196},"title":"Allow fabric to be service-centric","url":"https://api.github.com/repos/fabric/fabric/issues/541","created_at":"2012-01-28T13:45:59Z","labels":[],"number":541,"id":3005068,"body":"Currently from my point of view fabric is host-centric, i would like to allow fabric to be service-centric.\r\nLet me explain through a use case what i mean by host/service-centric and the associated feature proposal.\r\n\r\n### Use case:\r\nI want to deploy (or any other action) an application composed of some services (S1, S2, S3 ...) on some hosts (H1, H2, H3...).\r\nApplication requirements:\r\n\r\n * A service might be instantiated multiples times  (ex: H1, H2 host S1 service instances)\r\n * A host might host multiple service instances (ex: H1 hosts S1, S2 instances)\r\n * A host cannot host multiple instances of the same service (don't know how to handle it otherwise)\r\n\r\nThe application i currently manage is composed of ~15 services, 30 hosts, ~100 service instances and ~20 actions (which takes to execute from 1s to 2 minutes per service instances)\r\n\r\nWhat i would like : ``` fab deploy``` deploys service instances on hosts and more generally fab action apply on service instances \r\nthe action when it has a meaning\r\n\r\nSolutions:\r\n\r\n### Fabric current way (host-centric):\r\n\r\n * allocate services to hosts through env.roledefs (every service is represented by a role)\r\n\r\n```\r\nenv.roledefs = dict(S1=['H1','H2'], S2=['H1'], 'S3'=['H1', 'H2', 'H3'])\r\n```\r\n\r\n * define a deploy task for every with role restrictions\r\n\r\n```\r\n@task\r\n@roles('S1')\r\ndef S1_deploy():\r\n     # deploy S1 instance\r\n```\r\n\r\nsame for S2_deploy, S3_deploy ...\r\n\r\n * call every deploy tasks\r\n\r\n```\r\nfab S1_deploy S2_deploy S3_deploy\r\n```\r\n\r\nDoes the job but applicable only if the application has few services and few actions.\r\nWe cannot deploy S1/S2 service concurrently\r\n\r\n\r\n### Wrap fabric:\r\n\r\n * define a fabric wrapper fab2. For example the call to ```fab2 deploy``` will be transformed into\r\n\r\n  ```fab S1_deploy S2_deploy ...``` \r\n\r\n   * do not allow concurrency between service actions\r\n\r\n or call ```fab S${X}_deploy```  concurrently\r\n\r\n   * allow concurrency between service actions, \r\n   * but i loose some fab capabilities (runs_once for example)\r\n * S${X}_${action} must exist for every service and action\r\n\r\n### Fabric new way (service-centric):\r\n\r\n * allow host string to include the optional service information: ```username@hostname:port/servicename```\r\n * define a task proxy which will transfert every call to the implementation associated to the host string service \r\n\r\nDevelopment to support it (i will provide a code proposal next week because i currently lost my repo connection):\r\n\r\n * patch fabric.network.normalize to accept the optional servicename information\r\n * define the env.service attribute when servicename is provided in the host string\r\n * define a service task proxy class (ServiceProxyTask ?) to subclass which reroutes call to the right implementation\r\n  * Task implementations will respect (for example) the pattern ${taskname}_service_${servicename} or ${taskname}_service_default\r\n  * Task name is deduced from class function names\r\n  * One subclass of ServiceTask for every task ? Or a ServiceProxyTask subclass could provide more than one task\r\n\r\nUsage changes: \r\n\r\n * previous fabric env.roledefs becomes: \r\n\r\n``` env.hosts = ['H1/S1', 'H2/S1', 'H1/S2', 'H1/S3', 'H2/S3', 'H3/S3' ]```\r\n\r\n * S1_deploy, S2_deploy, S3_deploy becomes:\r\n\r\n```\r\nclass DeployClass(ServiceTask):\r\n\r\n     def deploy_service_S1(self):\r\n           # deploy S1 instance \r\n....\r\n```\r\n\r\n * You will handle services with full fab facilities !\r\n"},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/540","assignee":null,"updated_at":"2012-01-28T06:10:07Z","comments":0,"milestone":null,"state":"open","user":{"gravatar_id":"4cb51aa74068306f93490da3a7727234","login":"dcolish","avatar_url":"https://secure.gravatar.com/avatar/4cb51aa74068306f93490da3a7727234?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/dcolish","id":15602},"title":"Allow fabric to use dotted python paths","url":"https://api.github.com/repos/fabric/fabric/issues/540","created_at":"2012-01-28T06:10:07Z","labels":[{"color":"40a056","url":"https://api.github.com/repos/fabric/fabric/labels/Feature","name":"Feature"},{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Core","name":"Core"},{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/Tasks","name":"Tasks"},{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/Invoke","name":"Invoke"}],"number":540,"id":3003640,"body":"Gives the ability for a user to define a module in their PYTHONPATH which provides fabric commands. The user can then load that file from the commandline by running:\r\n\r\n    fab -f my.custom.fabfile\r\n\r\nBy default, fabric should look for the module fabfile in the PYTHONPATH. If no module is found, it falls back to the regular fabfile discovery process."},{"pull_request":{"diff_url":"https://github.com/fabric/fabric/pull/539.diff","html_url":"https://github.com/fabric/fabric/pull/539","patch_url":"https://github.com/fabric/fabric/pull/539.patch"},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/539","assignee":null,"updated_at":"2012-01-28T06:15:47Z","comments":1,"milestone":null,"state":"open","user":{"gravatar_id":"4cb51aa74068306f93490da3a7727234","login":"dcolish","avatar_url":"https://secure.gravatar.com/avatar/4cb51aa74068306f93490da3a7727234?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/dcolish","id":15602},"title":"Small update to docs, Issue #540 (Add dotted python path support)","url":"https://api.github.com/repos/fabric/fabric/issues/539","created_at":"2012-01-28T05:05:45Z","labels":[],"number":539,"id":3003442,"body":"The main body of this pull req is the implementation of issue #540. The remainder is based on a convo with bitprophet on irc; I thought adding a few lines to the development docs could be useful.\r\n"},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/537","assignee":null,"updated_at":"2012-02-29T06:25:19Z","comments":3,"milestone":null,"state":"open","user":{"gravatar_id":"6d694c8bf7fbebd7a67ddc74a5018133","login":"miracle2k","avatar_url":"https://secure.gravatar.com/avatar/6d694c8bf7fbebd7a67ddc74a5018133?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/miracle2k","id":13807},"title":"Support recursive wildcards using glob2","url":"https://api.github.com/repos/fabric/fabric/issues/537","created_at":"2012-01-26T23:36:44Z","labels":[{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/2.x","name":"2.x"},{"color":"40a056","url":"https://api.github.com/repos/fabric/fabric/labels/Feature","name":"Feature"},{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/put%28%29%2Fget%28%29","name":"put()/get()"}],"number":537,"id":2988141,"body":"I have modified the glob module to support recursive wildcards:\r\n\r\nhttps://github.com/miracle2k/python-glob2\r\n\r\nIt would be neat if I could use this in fabric's put(). The module is a simple drop-in replacement for the builtin glob that could be used whenever it's available, and would behave the same  unless the **/ syntax is used."},{"pull_request":{"diff_url":"https://github.com/fabric/fabric/pull/535.diff","html_url":"https://github.com/fabric/fabric/pull/535","patch_url":"https://github.com/fabric/fabric/pull/535.patch"},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/535","assignee":null,"updated_at":"2012-01-25T21:36:50Z","comments":2,"milestone":null,"state":"open","user":{"gravatar_id":"90f1c1537eca5858525f960adee75027","login":"mcmarkb","avatar_url":"https://secure.gravatar.com/avatar/90f1c1537eca5858525f960adee75027?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/mcmarkb","id":953948},"title":"Noddy implementation of a --dry-run-remote option","url":"https://api.github.com/repos/fabric/fabric/issues/535","created_at":"2012-01-25T17:57:36Z","labels":[{"color":"40a056","url":"https://api.github.com/repos/fabric/fabric/labels/Feature","name":"Feature"},{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Core","name":"Core"}],"number":535,"id":2968620,"body":"As discussed in #26 -- this solved my problem of a simple 'dry run' for when I'm only really pushing changes to a remote server and don't need to do a lot of logic based on remote state.\r\n\r\nCertainly would need fleshing out for other use cases and still performs local actions.\r\n\r\n"},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/533","assignee":null,"updated_at":"2012-02-29T01:42:08Z","comments":0,"milestone":null,"state":"open","user":{"gravatar_id":"f1acc6318028fdba9874c77bc622a2fb","login":"bitprophet","avatar_url":"https://secure.gravatar.com/avatar/f1acc6318028fdba9874c77bc622a2fb?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/bitprophet","id":6088},"title":"Option for skipping auth failures in addition to connection ones","url":"https://api.github.com/repos/fabric/fabric/issues/533","created_at":"2012-01-19T22:34:54Z","labels":[{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Core","name":"Core"},{"color":"40a056","url":"https://api.github.com/repos/fabric/fabric/labels/Feature","name":"Feature"}],"number":533,"id":2904598,"body":"In #8 we added the ability to skip over connection failures (ne `NetworkError`) but left authentication issues as a hard `abort()` since that's a different \"class\" of problem that felt like it should continue to fail-fast.\r\n\r\nHowever, we should eventually update things to let users who know what they're doing opt-in to skipping over those as well, probably with a similar approach (use the exceptions-for machinery, and another setting that can be toggled at CLI or `fabric.env` level, so they can either catch an exception or set a flag.)"},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/531","assignee":null,"updated_at":"2012-02-29T01:42:09Z","comments":0,"milestone":null,"state":"open","user":{"gravatar_id":"f1acc6318028fdba9874c77bc622a2fb","login":"bitprophet","avatar_url":"https://secure.gravatar.com/avatar/f1acc6318028fdba9874c77bc622a2fb?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/bitprophet","id":6088},"title":"Rethink env re: configuration & shared datastruct","url":"https://api.github.com/repos/fabric/fabric/issues/531","created_at":"2012-01-17T22:19:47Z","labels":[{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/2.x","name":"2.x"}],"number":531,"id":2875689,"body":"Fabric's `env` dictionary (`_AttributeDict`) has always functioned as a catchall for both effecting configuration changes, reading current configuration values, and storing user data between runs.\r\n\r\nThis is problematic in a number of ways:\r\n\r\n* It's generally confusing in the \"one thing used for multiple purposes\" sense\r\n* It's unclear which keys affect behavior when updated, and which are read-only (see: `env.host` vs `env.host_string`)\r\n* Users never truly *needed* it for their own (non-default) keys, as they could simply use their own in-fabfile module-level global data store (since that's all `env` is in this context -- a top level variable in `fabric.state`.)\r\n* It's possible to shoot oneself in the foot by accidentally overwriting config-related keys. Users should not really have to memorize the builtin config keys, which is the only good way to avoid this.\r\n    * Counterpoint: Python programmers *do* have to memorize the builtins or suffer bugs when redefining e.g. `map`.\r\n    * However, we have the power to make this a non-issue, and the problem is typically more subtle with us (i.e. in Python the problem is usually only triggered by trying to use the real builtin elsewhere; in Fabric you can screw things up with a single overwrite.)\r\n\r\nThe minimum solution should probably involve splitting out configuration related values from read-only and user ones, most likely ditching the recommendation for the \"user\" values entirely.\r\n\r\nIdeally, use an approach that retains the user-friendly/terse aspects (e.g. `if env.some_setting: ...` versus `if config.get('some_setting')`) while making things clearer/more explicit."},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/525","assignee":null,"updated_at":"2012-02-29T01:42:09Z","comments":4,"milestone":null,"state":"open","user":{"gravatar_id":"42f35063de01fdaa025c832e4d09efad","login":"cnf","avatar_url":"https://secure.gravatar.com/avatar/42f35063de01fdaa025c832e4d09efad?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/cnf","id":252949},"title":"Support for OS specific keychain for passwords","url":"https://api.github.com/repos/fabric/fabric/issues/525","created_at":"2012-01-06T14:50:08Z","labels":[{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"},{"color":"40a056","url":"https://api.github.com/repos/fabric/fabric/labels/Feature","name":"Feature"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Core","name":"Core"}],"number":525,"id":2747759,"body":"As per @akvadrako comment [in #497](https://github.com/fabric/fabric/issues/497#issuecomment-3372874), add support for specific keychains to store passwords.\r\n\r\nWe do not want to store our passwords in VCS\r\n\r\nWe do not want our passwords on disk.\r\n\r\nAnd we'd rather not retype passwords all the time, that is what we have keychains for :P"},{"pull_request":{"diff_url":"https://github.com/fabric/fabric/pull/524.diff","html_url":"https://github.com/fabric/fabric/pull/524","patch_url":"https://github.com/fabric/fabric/pull/524.patch"},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/524","assignee":null,"updated_at":"2012-01-06T05:30:07Z","comments":0,"milestone":null,"state":"open","user":{"gravatar_id":"05cde713cce28d246c98c44318b26cb3","login":"sjmh","avatar_url":"https://secure.gravatar.com/avatar/05cde713cce28d246c98c44318b26cb3?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/sjmh","id":12321},"title":"Fixes #518. Modifies AliasDict to allow for nested roles.","url":"https://api.github.com/repos/fabric/fabric/issues/524","created_at":"2012-01-06T05:30:07Z","labels":[{"color":"40a056","url":"https://api.github.com/repos/fabric/fabric/labels/Feature","name":"Feature"},{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Core","name":"Core"}],"number":524,"id":2744434,"body":"Here's a second shot at this.\r\n\r\nI modified AliasDict to no longer require the 'aliases' attribute to allow nesting, while keeping it's value setting 'shortcut' abilities used by outputs.  I decided against trying to use 'aliases' because:\r\n\r\na) It allowed for a seamless integration with the current role merge.  No code in task_utils.py had to be modified.\r\nb) The 'aliases' doesn't seem to gel well with the the idea of nested roles.  How would you determine which roles should be in the 'aliases' attribute and which should be in the main dict?  If you only put hosts in the dict, then you'd have to duplicate the hosts in the values for each key in the aliases attribute.\r\n\r\nThe only caveat to the implementation is that you cannot re-assign a key to a non-iterable if the key's value is already an iterable. This didn't seem to be too big of an issue ( you can simply delete and assign ) and it does allow for reassignment to another iterable.\r\n\r\nI put in a few more test cases as well to ensure that the nesting of the roles was working properly as well as fixing the cases for outputs to allow for the new syntax.\r\n\r\nComments, flames, accusing fingers are welcome. :)"},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/520","assignee":null,"updated_at":"2012-02-29T01:42:11Z","comments":0,"milestone":null,"state":"open","user":{"gravatar_id":"f1acc6318028fdba9874c77bc622a2fb","login":"bitprophet","avatar_url":"https://secure.gravatar.com/avatar/f1acc6318028fdba9874c77bc622a2fb?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/bitprophet","id":6088},"title":"Consider merging contrib.rsync_* into put/get","url":"https://api.github.com/repos/fabric/fabric/issues/520","created_at":"2012-01-02T19:42:16Z","labels":[{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Contrib","name":"Contrib"},{"color":"4070a0","url":"https://api.github.com/repos/fabric/fabric/labels/Support","name":"Support"}],"number":520,"id":2704349,"body":"Some use cases (namely anything with nontrivial amounts of data/code/assets) would benefit greatly from use of rsync. get/put currently don't support rsync, though they do at this point support recursion, globbing etc.\r\n\r\nThe contrib rsync functions tend to get little love and I tend not to want to support them as much. (See #517 for example.)\r\n\r\nIt might be wise to add an *optional* rsync-using backend to get/put, if we can get the existing get/put API to match up well.\r\n\r\nAlternately, just make sure that the rsync functions from contrib are migrated to Patchwork (#461) which would include cleaning them up a bit."},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/518","assignee":null,"updated_at":"2012-02-29T01:42:11Z","comments":5,"milestone":null,"state":"open","user":{"gravatar_id":"05cde713cce28d246c98c44318b26cb3","login":"sjmh","avatar_url":"https://secure.gravatar.com/avatar/05cde713cce28d246c98c44318b26cb3?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/sjmh","id":12321},"title":"Nested roles","url":"https://api.github.com/repos/fabric/fabric/issues/518","created_at":"2011-12-28T23:27:37Z","labels":[{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"},{"color":"40a056","url":"https://api.github.com/repos/fabric/fabric/labels/Feature","name":"Feature"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Core","name":"Core"}],"number":518,"id":2675870,"body":"Would be nice to allow 'nested' roles for ease of calling specific sets of roles.\r\n\r\nBecause roledefs allow callables, this can be done already by adding this to your fabfile:\r\n\r\n```python\r\ndef get_roles(*roles):\r\n    return lambda:[y for x in roles for y in env.roledefs[x]]\r\n\r\nenv.roledefs = {\r\n    'site1' : ['hostA','hostB','hostC'],\r\n    'site2' : ['hostD','hostE','hostF'],\r\n    'all'   : get_roles('site1','site2')\r\n}\r\n```\r\n\r\nCould either implement get_roles as an API function or make it more transparent:\r\n\r\n```python\r\nenv.roledefs = {\r\n    'site1' : ['hostA','hostB','hostC'],\r\n    'site2' : ['hostD','hostE','hostF'],\r\n    'all'   : ['site1','site2']\r\n}\r\n```\r\n\r\nWhich would seem to require a rework of the merge function to identify values that are actually role keys.  Would also have to prevent circular references.\r\n\r\nThoughts on which way would be 'better'?  For the user, it seems like the transparent method would be cleaner, although more effort to implement.\r\n\r\n"},{"pull_request":{"diff_url":"https://github.com/fabric/fabric/pull/516.diff","html_url":"https://github.com/fabric/fabric/pull/516","patch_url":"https://github.com/fabric/fabric/pull/516.patch"},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/516","assignee":null,"updated_at":"2011-12-23T18:51:52Z","comments":0,"milestone":null,"state":"open","user":{"gravatar_id":"987907210851218777552325b1d1abcd","login":"kryskool","avatar_url":"https://secure.gravatar.com/avatar/987907210851218777552325b1d1abcd?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/kryskool","id":337842},"title":"Add possibility to define FABRICRC environment variable","url":"https://api.github.com/repos/fabric/fabric/issues/516","created_at":"2011-12-23T18:51:52Z","labels":[{"color":"40a056","url":"https://api.github.com/repos/fabric/fabric/labels/Feature","name":"Feature"},{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Core","name":"Core"}],"number":516,"id":2649501,"body":""},{"pull_request":{"diff_url":null,"html_url":null,"patch_url":null},"closed_at":null,"html_url":"https://github.com/fabric/fabric/issues/515","assignee":null,"updated_at":"2012-02-29T01:56:38Z","comments":2,"milestone":null,"state":"open","user":{"gravatar_id":"163acaf31cfd01645493404a2d379df6","login":"jaraco","avatar_url":"https://secure.gravatar.com/avatar/163acaf31cfd01645493404a2d379df6?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","url":"https://api.github.com/users/jaraco","id":308610},"title":"Improve documentation on Failure handling","url":"https://api.github.com/repos/fabric/fabric/issues/515","created_at":"2011-12-22T16:10:51Z","labels":[{"color":"DDDDDD","url":"https://api.github.com/repos/fabric/fabric/labels/1.x","name":"1.x"},{"color":"ededed","url":"https://api.github.com/repos/fabric/fabric/labels/Docs","name":"Docs"},{"color":"02d7e1","url":"https://api.github.com/repos/fabric/fabric/labels/Quick","name":"Quick"},{"color":"4070a0","url":"https://api.github.com/repos/fabric/fabric/labels/Support","name":"Support"}],"number":515,"id":2638687,"body":"The section on Failure handling in usage/Execution does not describe how to signal a failure. Consider for example calling an executable that doesn't give nice return values for errors (i.e. apt-add-repository). A fabric author might write a function like this:\r\n\r\n```\r\n@task\r\ndef add_repo(repo):\r\n    res = sudo('apt-add-repository ' + repo)\r\n    # apt-add-repository always returns 0\r\n    # check res for the expected output or raise error\r\n```\r\n\r\nHowever, if one raises an exception, a not-so-nice traceback is displayed.\r\n\r\nI see in some other tickets there's mention of _handle_failure and abort. I'm going to track those down to find out if they might be of help in this scenario. It would be nice, however, if the documentation made mention of what the recommended technique is to signal a failure as if it had been signaled by fabric."}]
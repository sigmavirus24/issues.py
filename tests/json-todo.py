[{"pull_request":{"diff_url":null,"patch_url":null,"html_url":null},"updated_at":"2012-02-24T00:52:33Z","comments":0,"assignee":null,"state":"open","milestone":{"open_issues":3,"closed_issues":0,"state":"open","creator":{"login":"sigmavirus24","url":"https://api.github.com/users/sigmavirus24","avatar_url":"https://secure.gravatar.com/avatar/c148356d89f925e692178bee1d93acf7?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","gravatar_id":"c148356d89f925e692178bee1d93acf7","id":240830},"title":"0.3","url":"https://api.github.com/repos/sigmavirus24/Todo.txt-python/milestones/3","created_at":"2012-02-18T02:43:21Z","due_on":null,"number":3,"description":""},"closed_at":null,"user":{"login":"sigmavirus24","url":"https://api.github.com/users/sigmavirus24","avatar_url":"https://secure.gravatar.com/avatar/c148356d89f925e692178bee1d93acf7?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","gravatar_id":"c148356d89f925e692178bee1d93acf7","id":240830},"title":"More test cases","html_url":"https://github.com/sigmavirus24/Todo.txt-python/issues/17","url":"https://api.github.com/repos/sigmavirus24/Todo.txt-python/issues/17","created_at":"2012-02-24T00:52:33Z","labels":[{"color":"aa1a1a","url":"https://api.github.com/repos/sigmavirus24/Todo.txt-python/labels/Bug","name":"Bug"},{"color":"060b7c","url":"https://api.github.com/repos/sigmavirus24/Todo.txt-python/labels/Enhancement","name":"Enhancement"}],"number":17,"id":3366282,"body":"So with the bit of trouble I've found with the `get_config()` function, I'm going to say we need more test cases for the functions I didn't think needed testing, since I was clearly wrong. There are some which will not be testable by unittests (any interactive functions), but otherwise, I'm going to try to work on these before starting the add-on work."},{"pull_request":{"diff_url":null,"patch_url":null,"html_url":null},"updated_at":"2012-02-18T02:43:43Z","comments":0,"assignee":{"login":"sigmavirus24","url":"https://api.github.com/users/sigmavirus24","avatar_url":"https://secure.gravatar.com/avatar/c148356d89f925e692178bee1d93acf7?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","gravatar_id":"c148356d89f925e692178bee1d93acf7","id":240830},"state":"open","milestone":{"open_issues":3,"closed_issues":0,"state":"open","creator":{"login":"sigmavirus24","url":"https://api.github.com/users/sigmavirus24","avatar_url":"https://secure.gravatar.com/avatar/c148356d89f925e692178bee1d93acf7?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","gravatar_id":"c148356d89f925e692178bee1d93acf7","id":240830},"title":"0.3","url":"https://api.github.com/repos/sigmavirus24/Todo.txt-python/milestones/3","created_at":"2012-02-18T02:43:21Z","due_on":null,"number":3,"description":""},"closed_at":null,"user":{"login":"sigmavirus24","url":"https://api.github.com/users/sigmavirus24","avatar_url":"https://secure.gravatar.com/avatar/c148356d89f925e692178bee1d93acf7?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","gravatar_id":"c148356d89f925e692178bee1d93acf7","id":240830},"title":"Behavior inconsistency: Can run more than one list command at once","html_url":"https://github.com/sigmavirus24/Todo.txt-python/issues/16","url":"https://api.github.com/repos/sigmavirus24/Todo.txt-python/issues/16","created_at":"2012-02-16T22:30:35Z","labels":[{"color":"aa1a1a","url":"https://api.github.com/repos/sigmavirus24/Todo.txt-python/labels/Bug","name":"Bug"},{"color":"02760a","url":"https://api.github.com/repos/sigmavirus24/Todo.txt-python/labels/RFC","name":"RFC"}],"number":16,"id":3259768,"body":"Using the script as usual presents the usual results, i.e. `todo.py lsc` and `todo.py lsp` do the right things, but you can also run `todo.py lsc lsp` and get both outputs at the same time.\r\n\r\nI wouldn't normally be concerned with this except for the fact that I'm trying to conform, to a degree, with the behavior of ginatrapani/todo.txt-cli as much as possible.\r\n\r\nI'm more concerned with whether you think we should change this or not @jvstein .\r\n\r\nI gave this a milestone only so that we can resolve it before then."},{"pull_request":{"diff_url":null,"patch_url":null,"html_url":null},"updated_at":"2012-02-24T03:11:49Z","comments":1,"assignee":null,"state":"open","milestone":{"open_issues":3,"closed_issues":0,"state":"open","creator":{"login":"sigmavirus24","url":"https://api.github.com/users/sigmavirus24","avatar_url":"https://secure.gravatar.com/avatar/c148356d89f925e692178bee1d93acf7?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","gravatar_id":"c148356d89f925e692178bee1d93acf7","id":240830},"title":"0.3","url":"https://api.github.com/repos/sigmavirus24/Todo.txt-python/milestones/3","created_at":"2012-02-18T02:43:21Z","due_on":null,"number":3,"description":""},"closed_at":null,"user":{"login":"sigmavirus24","url":"https://api.github.com/users/sigmavirus24","avatar_url":"https://secure.gravatar.com/avatar/c148356d89f925e692178bee1d93acf7?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","gravatar_id":"c148356d89f925e692178bee1d93acf7","id":240830},"title":"Add-on/Built-in Override Capabilities","html_url":"https://github.com/sigmavirus24/Todo.txt-python/issues/15","url":"https://api.github.com/repos/sigmavirus24/Todo.txt-python/issues/15","created_at":"2012-02-10T17:22:02Z","labels":[{"color":"060b7c","url":"https://api.github.com/repos/sigmavirus24/Todo.txt-python/labels/Enhancement","name":"Enhancement"},{"color":"02760a","url":"https://api.github.com/repos/sigmavirus24/Todo.txt-python/labels/RFC","name":"RFC"}],"number":15,"id":3175381,"body":"# Allow Users to Create \"Add-ons\" For todo.py\r\n\r\nI know that [todo.sh](https://github.com/ginatrapani/todo.txt-cli) has a robust set of additional actions (or more simply put add-ons) that it supports. I see no reason why we can't support the same thing, especially since python allows for that kind of functionality. We just need to do it sanely, safely, and standardize it[1]\r\n\r\n## Adding Functionality to the Script\r\n\r\nIf a user wanted to, they could create a separate python script which they could import and would be able to add new functions to the script so they could add their own functionality.\r\n\r\n## Overriding Existing (Built-in) Functions\r\n\r\nIf a user so desired, they could rewrite any of the essential functions to perform extra operations (or fewer) and include them in this directory.\r\n\r\n## Design\r\n\r\n### command\r\n\r\nIn the original [todo.txt-cli](https://github.com/ginatrapani/todo.txt-cli) script, a user can choose to use the original functionality by adding the word `command` before the action they've overwritten. We could do the same, but it would require a little bit of trickery. See the examples before.\r\n\r\n### Directories\r\n\r\nWe could either follow [todo.txt-cli](https://github.com/ginatrapani/todo.txt-cli/wiki/Creating-and-Installing-Add-ons) and have a directory called `~/.todo.actions.d/` or we could make this a bit more logical and have it as a sub-directory of `~/.todo/`, i.e. `~/.todo/actions/`. \r\n\r\nBenefits of using `~/.todo.actions.d/`:\r\n\r\n  * Maintain todo.txt-cli design/functionality similarities\r\n  * Easier transition for todo.txt-cli users to this project\r\n\r\nBenefits of switching to `~/.todo/actions/`:\r\n\r\n  * Cleaner (in my opinion) directory structure.\r\n  * Also an option in todo.txt-cli\r\n\r\n***More can and will be added to these lists***\r\n\r\nRegardless of which option we choose, we will need to use this:\r\n\r\n```python\r\nimport sys\r\nsys.path.append('/path/to/directory')\r\n```\r\n\r\n### Design Examples\r\n```python\r\n# actions/__init__.py\r\nfrom foo import addon_foo\r\nfrom bar import addon_bar\r\n# ...\r\nfrom ni import addon_ni\r\n\r\naddon_dict = { \r\n    'command_name' : (True, addon_foo),\r\n    'other_command_name' : (False, addon_bar),\r\n    # ...\r\n    'last_command_name' : (True, addon_ni)\r\n}\r\n\r\n# True/False depends on whether or not the function\r\n#   requires arguments to be passed to it.\r\n```\r\n\r\n```python\r\n# todo.py\r\n\r\n# [snip]\r\nif __name__ == \"__main__\":\r\n# [snip]\r\n    from actions import addon_dict\r\n    commands.update(addon_dict)\r\n```\r\n\r\n### A working (lazy) example\r\n\r\nBy lazy, I mean not allowing for something like: `todo.py command add foo bar bogus`.\r\n\r\n**Directory structure**\r\n\r\n * `mod/`\r\n   * `__init__.py`\r\n   * `add.py`\r\n * `test.py`\r\n\r\n**mod/__init__.py**\r\n\r\n```python\r\nfrom add import *\r\n\r\nmod_dict = {'add': add}\r\n```\r\n\r\n**mod/add.py**\r\n\r\n```python\r\ndef add(a, b):\r\n    return 2 * (a + b)\r\n```\r\n\r\n**test.py**\r\n\r\n```python\r\ndef add(a, b):\r\n    return a + b\r\n\r\ncommands = { 'add': add }\r\n\r\ndef main():\r\n    print(\"1 + 2 = \")\r\n    print(\"default add: {0}\".format(commands['add'](1, 2)))\r\n    from mod import mod_dict\r\n    commands.update(mod_dict)\r\n    print(\"mod.add: {0}\".format(commands['add'](1, 2)))\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n### A working (non-lazy) example\r\n\r\nBy non-lazy, I mean allowing for something like: `todo.py command add foo bar bogus`.\r\n\r\n**Directory structure**\r\n\r\n * `mod/`\r\n   * `__init__.py`\r\n   * `add.py`\r\n * `test.py`\r\n\r\n**mod/__init__.py**\r\n\r\n```python\r\nfrom add import *\r\n\r\nmod_dict = {'add': add}\r\n```\r\n\r\n**mod/add.py**\r\n\r\n```python\r\ndef add(a, b):\r\n    return 2 * (a + b)\r\n```\r\n\r\n**test.py**\r\n\r\n```python\r\ndef add(a, b):\r\n    return a + b\r\n\r\norig_commands = { 'add': add }  # Keeps the original function 'pointers'\r\ncommands = orig_commands.copy()\r\n\r\ndef main():\r\n    print(\"1 + 2 = \")\r\n    print(\"default add: {0}\".format(commands['add'](1, 2)))\r\n    from mod import mod_dict\r\n    commands.update(mod_dict)\r\n    # Depending on the user_input, either use the next line\r\n    print(\"add: {0}\".format(commands['add'](1, 2)))\r\n    # Or this line\r\n    print(\"add: {0}\".format(orig_commands['add'](1, 2)))\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n### Key difference between `todo.sh` and `todo.py`\r\n\r\n`__init__.py` will need to keep a dictionary which it will include in the `__all__` list. It needs a standard name so that we can import it and update our commands dictionary to use it. It will have to be of the same form as our current commands dictionary, i.e.\r\n\r\n```python\r\nexample = {  # Command : ( Requires Arguments, Function name)\r\n     'add': (True, add),\r\n     'a':    (True, add),\r\n     'do':  (True, mark_done)\r\n     }\r\n```\r\n\r\nTo prevent having to do any serious error catching, we should just check to see if the directory exists before adding it to the path. \r\n\r\n```python\r\nimport os\r\n\r\nif os.path.exists(_path('~/.todo.actions.d')):\r\n   # Carry-on\r\n```\r\n\r\n## [1] Add-on Requirements\r\n\r\n  * It's own repository\r\n  * Well-documented: Plenty of comments and doc-strings\r\n    * Doc-strings are incredibly important, so that in the future we could append them to the output of `todo.py help`\r\n  * Includes its own unittests\r\n    * If the author(s) are uncomfortable writing them, they can reference our unittests\r\n  * PEP8 Compliance\r\n  * Shouldn't affect the performance of the script.\r\n\r\n## What todo.py should do in anticipation\r\n\r\nOur cmd_help() function is static. A better way of doing this might be to make the doc-strings for action functions the help output. For example:\r\n\r\n```python\r\ndef add_todo(args):\r\n    \"\"\"\r\n    Add a new item to the list of things todo.\r\n    \"\"\"\r\n    if str(args) == args:\r\n        line = args\r\n    elif len(args) >= 1:\r\n        line = concat(args, \" \")\r\n    else:\r\n        line = prompt(\"Add:\")\r\n    prepend = CONFIG[\"PRE_DATE\"]\r\n    l = len([1 for l in iter_todos()]) + 1\r\n    pri_re = re.compile('(\\([A-X]\\))')\r\n    if pri_re.match(line) and prepend:\r\n        line = pri_re.sub(concat([\"\\g<1>\",\r\n            datetime.now().strftime(\" %Y-%m-%d \")]),\r\n            line)\r\n    elif prepend:\r\n        line = concat([datetime.now().strftime(\"%Y-%m-%d \"), line])\r\n    with open(CONFIG[\"TODO_FILE\"], \"a\") as fd:\r\n        fd.write(concat([line, \"\\n\"]))\r\n    s = \"TODO: '{0}' added on line {1}.\".format(\r\n        line, l)\r\n    print(s)\r\n    if CONFIG[\"USE_GIT\"]:\r\n        _git_commit([CONFIG[\"TODO_FILE\"]], s)\r\n```\r\n\r\nWould become:\r\n\r\n```python\r\ndef add_todo(args):\r\n    \"\"\"\\tadd | a \"Item to do +project @context #{yyyy-mm-dd}\"\r\n\\t\\tAdds 'Item to do +project @context\" #{yyyy-mm-dd}' to your todo.txt\"\"\"\r\n\r\n    if str(args) == args:\r\n        line = args\r\n    elif len(args) >= 1:\r\n        line = concat(args, \" \")\r\n    else:\r\n        line = prompt(\"Add:\")\r\n    prepend = CONFIG[\"PRE_DATE\"]\r\n    l = len([1 for l in iter_todos()]) + 1\r\n    pri_re = re.compile('(\\([A-X]\\))')\r\n    if pri_re.match(line) and prepend:\r\n        line = pri_re.sub(concat([\"\\g<1>\",\r\n            datetime.now().strftime(\" %Y-%m-%d \")]),\r\n            line)\r\n    elif prepend:\r\n        line = concat([datetime.now().strftime(\"%Y-%m-%d \"), line])\r\n    with open(CONFIG[\"TODO_FILE\"], \"a\") as fd:\r\n        fd.write(concat([line, \"\\n\"]))\r\n    s = \"TODO: '{0}' added on line {1}.\".format(\r\n        line, l)\r\n    print(s)\r\n    if CONFIG[\"USE_GIT\"]:\r\n        _git_commit([CONFIG[\"TODO_FILE\"]], s)\r\n```\r\n\r\nand cmd_help() would do\r\n\r\n```python\r\ndef cmd_help():\r\n    print(concat([\"Use\", CONFIG[\"TODO_PY\"], \"-h for option help\"], \" \"))\r\n    print(\"\")\r\n    print(concat([\"Usage:\", CONFIG[\"TODO_PY\"], \"command [arg(s)]\"], \" \"))\r\n    print(add_todo._doc__)  # preserves forward compatibility with Python 3\r\n    # ...\r\n```"},{"pull_request":{"diff_url":null,"patch_url":null,"html_url":null},"updated_at":"2012-02-25T21:35:04Z","comments":4,"assignee":null,"state":"open","milestone":{"open_issues":1,"closed_issues":0,"state":"open","creator":{"login":"sigmavirus24","url":"https://api.github.com/users/sigmavirus24","avatar_url":"https://secure.gravatar.com/avatar/c148356d89f925e692178bee1d93acf7?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","gravatar_id":"c148356d89f925e692178bee1d93acf7","id":240830},"title":"Future","url":"https://api.github.com/repos/sigmavirus24/Todo.txt-python/milestones/2","created_at":"2011-12-18T17:50:22Z","due_on":null,"number":2,"description":"Any non-critical future feature"},"closed_at":null,"user":{"login":"sigmavirus24","url":"https://api.github.com/users/sigmavirus24","avatar_url":"https://secure.gravatar.com/avatar/c148356d89f925e692178bee1d93acf7?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png","gravatar_id":"c148356d89f925e692178bee1d93acf7","id":240830},"title":"GitHub integration for Issues/Pull Requests","html_url":"https://github.com/sigmavirus24/Todo.txt-python/issues/9","url":"https://api.github.com/repos/sigmavirus24/Todo.txt-python/issues/9","created_at":"2011-12-18T18:02:03Z","labels":[{"color":"02760a","url":"https://api.github.com/repos/sigmavirus24/Todo.txt-python/labels/RFC","name":"RFC"}],"number":9,"id":2594288,"body":"# Todo_github.py\r\n\r\nI was wondering if it would be worthwhile to fork the development and instead of managing a regular todo.txt list, if it would be useful for anyone if the todo.py script used the pull requests and issues on specified projects as the list of items todo. It would grab the issues/pull requests and one could sort by label, submitter, age, milestone, etc.\r\n\r\n## Examples\r\nFor example, if the script were to watch this project, it would look something like:\r\n### **Normal**\r\n\r\n> ~$ t ls\r\n> 6 Make GitPython Importing Conditional (sigmavirus24) @jvstein +Enhancement #{0.2 - No due date}\r\n> 8 Testing and Performance Suite (sigmavirus24) @sigmavirus24 +Enhancement #{0.2 - No due date}\r\n> 9 GitHub integration for Issues/Pull Requests (sigmavirus24) +RFC #{Future - No due date}\r\n\r\n### **List Projects/Issue Labels**\r\n\r\n> ~$ t lsp\r\n> Enhancement:\r\n> &nbsp; &nbsp; &nbsp; 6 Make GitPython Importing Conditional (sigmavirus24) @jvstein +Enhancement #{0.2 - No due date}\r\n> &nbsp; &nbsp; &nbsp; 8 Testing and Performance Suite (sigmavirus24) @sigmavirus24 +Enhancement #{0.2 - No due date}\r\n> RFC:\r\n> &nbsp; &nbsp; &nbsp; 9 GitHub Integration for Issues/Pull Requests (sigmavirus24) +RFC #{Future - No due date}\r\n\r\n### **List Date/Milestone**\r\n\r\n> ~$ t lsd\r\n> 0.2 - No due date\r\n> &nbsp; &nbsp; &nbsp; 6 ...\r\n> &nbsp; &nbsp; &nbsp; 8 ...\r\n> Future - No due date\r\n> &nbsp; &nbsp; &nbsp; 9 ...\r\n\r\n### **List Context/Assignee**\r\n\r\n> ~$ t lsc\r\n> jvstein:\r\n> &nbsp; &nbsp; &nbsp; 6 ...\r\n> sigmavirus24:\r\n> &nbsp; &nbsp; &nbsp; 8 ...\r\n> 9 ...\r\n\r\n### **List Info About a Specific Issue**\r\n\r\n> ~$ t more 6\r\n> 6 Make GitPython Importing Conditional (sigmavirus24) @jvstein +Enhancement #{0.2 - No due date}\r\n> &nbsp; &nbsp; https://github.com/sigmavirus24/Todo.txt-python/issues/6 -- 7 comments - December 03, 2011\r\n> &nbsp; &nbsp; See the comments on issue #5. ...\r\n\r\nThe submitter name in parentheses doesn't exactly match the idea of a priority, but to whom it is assigned would make sense for the context tag (@) as well as using the project tag for the label(s) and the #{date} notation for the milestone.\r\n\r\nI'm just curious if this is worth it. I would hope that interacting with the GitHub API wouldn't add too much heft. We could also remove all the GitPython dependencies.\r\n\r\n### List All Issues (Closed & Open)\r\n\r\n> ~$ t lsa\r\n> 6 Make ...\r\n> 9 GitHub ...\r\n> 1 x 2011-10-10 Change ...\r\n> 2 x 2011-11-30 Removed ...\r\n> 3 x 2011-11-30 ...\r\n> 4 x 2011-12-01 ...\r\n> 5 x 2011-12-03 ...\r\n> 7 x 2011-12-10 ...\r\n> 8 x 2011-12-21 ...\r\n\r\nIf there were more then 9, obviously padding would kick in.\r\n\r\n\r\n### Also up for consideration:\r\n* Allowing for the creation of issues from the script\r\n* Allowing for someone to comment on issues\r\n* Sorting by which issue has the most comments/etc.\r\n\r\nI think these would add a bit too much, but that shouldn't be a reason not to do it. (But, I do entirely intend this to be a different project based off of the existing code base, in other words not part of this project)\r\n\r\n===\r\n**Edit**: Changed `~$ t ls 6` to `~$ t more 6`."}]